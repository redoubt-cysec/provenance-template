name: Build All Platforms

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # Core Python multi-version testing
  test-python-multiversion:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a52 # v5.3.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        run: |
          if [ "${{ runner.os }}" = "macOS" ]; then
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          else
            curl -LsSf https://astral.sh/uv/install.sh | sh
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          fi

      - name: Build .pyz package
        run: |
          ./scripts/build_pyz.sh

      - name: Test .pyz execution
        run: |
          ./dist/provenance-demo.pyz --version
          ./dist/provenance-demo.pyz hello "Python ${{ matrix.python-version }}"

      - name: Upload .pyz artifact
        uses: actions/upload-artifact@65c4e9e2f5e1a4c3e4f3e8d5f9f6b6c6e8c9e0d0 # v4.4.3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          name: redoubt-pyz
          path: dist/provenance-demo.pyz
          retention-days: 7

  # AppImage build
  build-appimage:
    name: Build AppImage
    runs-on: ubuntu-latest
    needs: test-python-multiversion

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a52 # v5.3.0
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

          # Install linuxdeploy
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          sudo mv linuxdeploy-x86_64.AppImage /usr/local/bin/linuxdeploy

      - name: Build .pyz
        run: ./scripts/build_pyz.sh

      - name: Build AppImage
        run: |
          export ARCH=x86_64
          ./packaging/appimage/build-appimage.sh

      - name: Test AppImage
        run: |
          # Find the AppImage (name has date)
          APPIMAGE=$(find . -name "redoubt-*.AppImage" -type f | head -1)
          chmod +x "$APPIMAGE"
          "$APPIMAGE" --version
          "$APPIMAGE" hello "AppImage CI"

      - name: Upload AppImage
        uses: actions/upload-artifact@65c4e9e2f5e1a4c3e4f3e8d5f9f6b6c6e8c9e0d0 # v4.4.3
        with:
          name: redoubt-appimage
          path: redoubt-*.AppImage
          retention-days: 7

  # Nix build
  build-nix:
    name: Build Nix Package
    runs-on: ${{ matrix.os }}
    needs: test-python-multiversion
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        if: matrix.os == 'ubuntu-latest'
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@da36cb69b1c3247ad7a1f931ebfd954a1105ef14 # v14
        with:
          extra-conf: |
            experimental-features = nix-command flakes

      - name: Setup Nix cache
        uses: DeterminateSystems/magic-nix-cache-action@87b14cf437d03d37989d87f0fa5ce4f5dc1a330b # v8

      - name: Build with Nix
        run: |
          nix build .# -L

      - name: Test Nix package
        run: |
          ./result/bin/redoubt --version
          ./result/bin/redoubt hello "Nix CI on ${{ matrix.os }}"

      - name: Run nix flake check
        run: nix flake check

  # AUR package validation
  validate-aur:
    name: Validate AUR Package
    runs-on: ubuntu-latest
    needs: test-python-multiversion

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Validate PKGBUILD syntax
        run: |
          # Install basic Arch tools for validation
          sudo apt-get update
          sudo apt-get install -y namcap || true

          # Basic syntax check
          bash -n packaging/aur/PKGBUILD
          echo "PKGBUILD syntax is valid"

      - name: Check PKGBUILD required fields
        run: |
          cd packaging/aur

          # Check required fields exist
          for field in pkgname pkgver pkgrel pkgdesc arch url license depends source sha256sums; do
            if ! grep -q "^${field}=" PKGBUILD; then
              echo "ERROR: Missing required field: $field"
              exit 1
            fi
          done

          echo "All required PKGBUILD fields present"

  # GPG signing setup test
  test-gpg-setup:
    name: Test GPG Setup Scripts
    runs-on: ubuntu-latest

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2.10.1
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Test GPG scripts syntax
        run: |
          bash -n scripts/release/setup-gpg-in-ci.sh
          bash -n scripts/release/sign-apt-repo.sh
          bash -n scripts/release/sign-rpm.sh
          echo "All GPG scripts have valid syntax"

      - name: Verify GPG setup script
        run: |
          # Test the script can run (without actual keys)
          # Just verify it doesn't have errors in the setup logic
          if command -v gpg >/dev/null 2>&1; then
            echo "GPG is available"
            gpg --version
          fi

  # Summary job
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs:
      - test-python-multiversion
      - build-appimage
      - build-nix
      - validate-aur
      - test-gpg-setup
    if: always()

    steps:
      - name: Check build status
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Python Multi-version | ${{ needs.test-python-multiversion.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| AppImage | ${{ needs.build-appimage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Nix | ${{ needs.build-nix.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| AUR | ${{ needs.validate-aur.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| GPG | ${{ needs.test-gpg-setup.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Fail if any job failed
        if: |
          needs.test-python-multiversion.result == 'failure' ||
          needs.build-appimage.result == 'failure' ||
          needs.build-nix.result == 'failure' ||
          needs.validate-aur.result == 'failure' ||
          needs.test-gpg-setup.result == 'failure'
        run: exit 1
