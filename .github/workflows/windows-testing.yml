name: windows-testing
on: [workflow_dispatch, pull_request]

permissions:
  contents: read  # Only needs to checkout code for testing

jobs:
  test-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        package_manager: [scoop, chocolatey]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b  # v5.3.0
        with:
          python-version: '3.11'

      - name: Install build dependencies (for Chocolatey)
        if: matrix.package_manager == 'chocolatey'
        shell: powershell
        run: |
          # Install rsync (required by build_pyz.sh)
          choco install rsync -y

          # Install uv
          Invoke-WebRequest -Uri "https://github.com/astral-sh/uv/releases/download/0.5.11/uv-x86_64-pc-windows-msvc.zip" -OutFile "$env:TEMP\uv.zip"
          Expand-Archive -Path "$env:TEMP\uv.zip" -DestinationPath "$env:TEMP\uv"
          New-Item -ItemType Directory -Path "$env:USERPROFILE\.cargo\bin" -Force | Out-Null
          Move-Item -Path "$env:TEMP\uv\uv.exe" -Destination "$env:USERPROFILE\.cargo\bin\uv.exe" -Force
          echo "$env:USERPROFILE\.cargo\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build .pyz (for Chocolatey)
        if: matrix.package_manager == 'chocolatey'
        shell: bash
        run: ./scripts/build_pyz.sh

      - name: Test ${{ matrix.package_manager }}
        shell: powershell
        env:
          pythonLocation: ${{ env.pythonLocation }}
        run: |
          switch ("${{ matrix.package_manager }}") {
            "scoop" {
              # Install Scoop
              iwr -useb get.scoop.sh | iex
              # Refresh PATH to include both Scoop and Python
              $userPath = [System.Environment]::GetEnvironmentVariable("Path","User")
              $pythonPath = "${{ env.pythonLocation }};${{ env.pythonLocation }}\Scripts"
              $env:Path = "$pythonPath;$userPath;$env:Path"

              # Install directly from manifest file
              scoop install "${{ github.workspace }}\packaging\scoop\provenance-demo.json"

              # Test the installation
              $pyzPath = Join-Path $env:USERPROFILE "scoop\apps\provenance-demo\current\provenance-demo.pyz"
              Write-Host "Testing: $pyzPath"
              python $pyzPath --version
            }
            "chocolatey" {
              # Build Chocolatey package
              Write-Host "Building Chocolatey package..."
              pwsh -File scripts/build_chocolatey.ps1 -Version "v0.0.1-test" -PyzPath "dist/provenance-demo.pyz"

              # Install from local package
              Write-Host "Installing Chocolatey package..."
              $nupkg = Get-ChildItem -Path dist -Filter "*.nupkg" | Select-Object -First 1
              choco install provenance-demo --version="0.0.1-test" --prerelease -y --source="$($nupkg.DirectoryName)" --ignore-dependencies --force

              # Test installation
              Write-Host "Testing installation..."
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              provenance-demo --version
            }
            # "winget" {
            #   # Enable local manifest support so winget can install from a file
            #   winget source reset --force
            #   winget source add --name winget --arg https://cdn.winget.microsoft.com/cache --type Microsoft.PreIndexed.Package
            #   winget source remove --name msstore
            #   winget settings --enable LocalManifestFiles
            #   winget validate .\packaging\winget\manifests\OWNER.redoubt.yaml
            #   winget install --manifest .\packaging\winget\manifests\OWNER.redoubt.yaml `
            #     --silent --accept-source-agreements --accept-package-agreements
            #   $linkDir = Join-Path $Env:LOCALAPPDATA 'Microsoft\WinGet\Links'
            #   if (Test-Path $linkDir) {
            #     $Env:PATH = "$linkDir;$Env:PATH"
            #     Get-ChildItem $linkDir
            #   }
            #   provenance-demo --version
            # }
          }
